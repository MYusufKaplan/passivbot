#    This file is part of DEAP.
#
#    DEAP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, either version 3 of
#    the License, or (at your option) any later version.
#
#    DEAP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with DEAP. If not, see <http://www.gnu.org/licenses/>.

"""The :mod:`algorithms` module is intended to contain some specific algorithms
in order to execute very common evolutionary algorithms. The method used here
are more for convenience than reference as the implementation of every
evolutionary algorithm may vary infinitely. Most of the algorithms in this
module use operators registered in the toolbox. Generally, the keyword used are
:meth:`mate` for crossover, :meth:`mutate` for mutation, :meth:`~deap.select`
for selection and :meth:`evaluate` for evaluation.

You are encouraged to write your own algorithms in order to make them do what
you really want them to do.
"""

import random

from . import tools


def varAnd(population, toolbox, cxpb, mutpb):
    r"""Part of an evolutionary algorithm applying only the variation part
    (crossover **and** mutation). The modified individuals have their
    fitness invalidated. The individuals are cloned so returned population is
    independent of the input population.

    :param population: A list of individuals to vary.
    :param toolbox: A :class:`~deap.base.Toolbox` that contains the evolution
                    operators.
    :param cxpb: The probability of mating two individuals.
    :param mutpb: The probability of mutating an individual.
    :returns: A list of varied individuals that are independent of their
              parents.

    The variation goes as follow. First, the parental population
    :math:`P_\mathrm{p}` is duplicated using the :meth:`toolbox.clone` method
    and the result is put into the offspring population :math:`P_\mathrm{o}`.  A
    first loop over :math:`P_\mathrm{o}` is executed to mate pairs of
    consecutive individuals. According to the crossover probability *cxpb*, the
    individuals :math:`\mathbf{x}_i` and :math:`\mathbf{x}_{i+1}` are mated
    using the :meth:`toolbox.mate` method. The resulting children
    :math:`\mathbf{y}_i` and :math:`\mathbf{y}_{i+1}` replace their respective
    parents in :math:`P_\mathrm{o}`. A second loop over the resulting
    :math:`P_\mathrm{o}` is executed to mutate every individual with a
    probability *mutpb*. When an individual is mutated it replaces its not
    mutated version in :math:`P_\mathrm{o}`. The resulting :math:`P_\mathrm{o}`
    is returned.

    This variation is named *And* because of its propensity to apply both
    crossover and mutation on the individuals. Note that both operators are
    not applied systematically, the resulting individuals can be generated from
    crossover only, mutation only, crossover and mutation, and reproduction
    according to the given probabilities. Both probabilities should be in
    :math:`[0, 1]`.
    """
    offspring = [toolbox.clone(ind) for ind in population]

    # Apply crossover and mutation on the offspring
    for i in range(1, len(offspring), 2):
        if random.random() < cxpb:
            offspring[i - 1], offspring[i] = toolbox.mate(offspring[i - 1],
                                                          offspring[i])
            del offspring[i - 1].fitness.values, offspring[i].fitness.values

    for i in range(len(offspring)):
        if random.random() < mutpb:
            offspring[i], = toolbox.mutate(offspring[i])
            del offspring[i].fitness.values

    return offspring


def eaSimple(population, toolbox, cxpb, mutpb, ngen, stats=None,
             halloffame=None, verbose=__debug__):
    """This algorithm reproduce the simplest evolutionary algorithm as
    presented in chapter 7 of [Back2000]_.

    :param population: A list of individuals.
    :param toolbox: A :class:`~deap.base.Toolbox` that contains the evolution
                    operators.
    :param cxpb: The probability of mating two individuals.
    :param mutpb: The probability of mutating an individual.
    :param ngen: The number of generation.
    :param stats: A :class:`~deap.tools.Statistics` object that is updated
                  inplace, optional.
    :param halloffame: A :class:`~deap.tools.HallOfFame` object that will
                       contain the best individuals, optional.
    :param verbose: Whether or not to log the statistics.
    :returns: The final population
    :returns: A class:`~deap.tools.Logbook` with the statistics of the
              evolution

    The algorithm takes in a population and evolves it in place using the
    :meth:`varAnd` method. It returns the optimized population and a
    :class:`~deap.tools.Logbook` with the statistics of the evolution. The
    logbook will contain the generation number, the number of evaluations for
    each generation and the statistics if a :class:`~deap.tools.Statistics` is
    given as argument. The *cxpb* and *mutpb* arguments are passed to the
    :func:`varAnd` function. The pseudocode goes as follow ::

        evaluate(population)
        for g in range(ngen):
            population = select(population, len(population))
            offspring = varAnd(population, toolbox, cxpb, mutpb)
            evaluate(offspring)
            population = offspring

    As stated in the pseudocode above, the algorithm goes as follow. First, it
    evaluates the individuals with an invalid fitness. Second, it enters the
    generational loop where the selection procedure is applied to entirely
    replace the parental population. The 1:1 replacement ratio of this
    algorithm **requires** the selection procedure to be stochastic and to
    select multiple times the same individual, for example,
    :func:`~deap.tools.selTournament` and :func:`~deap.tools.selRoulette`.
    Third, it applies the :func:`varAnd` function to produce the next
    generation population. Fourth, it evaluates the new individuals and
    compute the statistics on this population. Finally, when *ngen*
    generations are done, the algorithm returns a tuple with the final
    population and a :class:`~deap.tools.Logbook` of the evolution.

    .. note::

        Using a non-stochastic selection method will result in no selection as
        the operator selects *n* individuals from a pool of *n*.

    This function expects the :meth:`toolbox.mate`, :meth:`toolbox.mutate`,
    :meth:`toolbox.select` and :meth:`toolbox.evaluate` aliases to be
    registered in the toolbox.

    .. [Back2000] Back, Fogel and Michalewicz, "Evolutionary Computation 1 :
       Basic Algorithms and Operators", 2000.
    """
    logbook = tools.Logbook()
    logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

    # Evaluate the individuals with an invalid fitness
    invalid_ind = [ind for ind in population if not ind.fitness.valid]
    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
    for ind, fit in zip(invalid_ind, fitnesses):
        ind.fitness.values = fit

    if halloffame is not None:
        halloffame.update(population)

    record = stats.compile(population) if stats else {}
    logbook.record(gen=0, nevals=len(invalid_ind), **record)
    if verbose:
        print(logbook.stream)

    # Begin the generational process
    for gen in range(1, ngen + 1):
        # Select the next generation individuals
        offspring = toolbox.select(population, len(population))

        # Vary the pool of individuals
        offspring = varAnd(offspring, toolbox, cxpb, mutpb)

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        # Update the hall of fame with the generated individuals
        if halloffame is not None:
            halloffame.update(offspring)

        # Replace the current population by the offspring
        population[:] = offspring

        # Append the current generation statistics to the logbook
        record = stats.compile(population) if stats else {}
        logbook.record(gen=gen, nevals=len(invalid_ind), **record)
        if verbose:
            print(logbook.stream)

    return population, logbook


def varOr(population, toolbox, lambda_, cxpb, mutpb):
    r"""Part of an evolutionary algorithm applying only the variation part
    (crossover, mutation **or** reproduction). The modified individuals have
    their fitness invalidated. The individuals are cloned so returned
    population is independent of the input population.

    :param population: A list of individuals to vary.
    :param toolbox: A :class:`~deap.base.Toolbox` that contains the evolution
                    operators.
    :param lambda\_: The number of children to produce
    :param cxpb: The probability of mating two individuals.
    :param mutpb: The probability of mutating an individual.
    :returns: The final population.

    The variation goes as follow. On each of the *lambda_* iteration, it
    selects one of the three operations; crossover, mutation or reproduction.
    In the case of a crossover, two individuals are selected at random from
    the parental population :math:`P_\mathrm{p}`, those individuals are cloned
    using the :meth:`toolbox.clone` method and then mated using the
    :meth:`toolbox.mate` method. Only the first child is appended to the
    offspring population :math:`P_\mathrm{o}`, the second child is discarded.
    In the case of a mutation, one individual is selected at random from
    :math:`P_\mathrm{p}`, it is cloned and then mutated using using the
    :meth:`toolbox.mutate` method. The resulting mutant is appended to
    :math:`P_\mathrm{o}`. In the case of a reproduction, one individual is
    selected at random from :math:`P_\mathrm{p}`, cloned and appended to
    :math:`P_\mathrm{o}`.

    This variation is named *Or* because an offspring will never result from
    both operations crossover and mutation. The sum of both probabilities
    shall be in :math:`[0, 1]`, the reproduction probability is
    1 - *cxpb* - *mutpb*.
    """
    assert (cxpb + mutpb) <= 1.0, (
        "The sum of the crossover and mutation probabilities must be smaller "
        "or equal to 1.0.")

    offspring = []
    for _ in range(lambda_):
        op_choice = random.random()
        if op_choice < cxpb:            # Apply crossover
            ind1, ind2 = [toolbox.clone(i) for i in random.sample(population, 2)]
            ind1, ind2 = toolbox.mate(ind1, ind2)
            del ind1.fitness.values
            offspring.append(ind1)
        elif op_choice < cxpb + mutpb:  # Apply mutation
            ind = toolbox.clone(random.choice(population))
            ind, = toolbox.mutate(ind)
            del ind.fitness.values
            offspring.append(ind)
        else:                           # Apply reproduction
            offspring.append(random.choice(population))

    return offspring

import os
import pickle
import datetime
import time
import numpy as np
from collections import deque
from rich.console import Console
from rich.text import Text
from rich.panel import Panel
from rich.rule import Rule
from rich.progress import Progress, TextColumn, BarColumn, TimeElapsedColumn, TimeRemainingColumn, SpinnerColumn, TaskProgressColumn
from multiprocessing import Pool, cpu_count

RED = "\033[91m"
GREEN = "\033[92m"
CYAN = "\033[96m"
YELLOW = "\033[93m"
RESET = "\033[0m"

# Initialize the console for rich output
console = console = Console(
            force_terminal=True, 
            no_color=False, 
            log_path=False, 
            width=159,
            color_system="truecolor",  # Force truecolor support
            legacy_windows=False
        )

def population_diversity(pop):
    gene_matrix = np.array(pop)
    return np.sum(np.std(gene_matrix, axis=0))

def log_message(message, emoji=None, panel=False, timestamp=True):
    """Utility function to print logs with Rich panels and rules"""
    if timestamp:
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    else:
        timestamp = ""
    emoji_str = f" {emoji}" if emoji else ""
    log_text = f"{timestamp}{emoji_str} {message}"

    # Using Rule for major transitions
    if panel:
        panel_message = Panel(log_text, title="Stats", border_style="cyan")
        console_wrapper(panel_message)
    else:
        console_wrapper(log_text)

import contextlib

LOG_PATH = "logs/evaluation_output.log"
WATCH_PATH = "logs/evaluation.log"
BEST_LOG_PATH = "logs/evaluation_output_best.log"

def evaluate_solution(args):
    evaluator, ind, showMe = args
    if showMe:
        with open(BEST_LOG_PATH, "a") as f, contextlib.redirect_stdout(f), contextlib.redirect_stderr(f):
            print("\n" + "=" * 60)  # separator between evaluations
            # Return a tuple (as DEAP expects)
            return evaluator.evaluate(ind)
    with open(LOG_PATH, "a") as f, contextlib.redirect_stdout(f), contextlib.redirect_stderr(f):
        print("\n" + "=" * 60)  # separator between evaluations
        # Return a tuple (as DEAP expects)
        return evaluator.evaluate(ind)

def run_algo(evaluator, population, showMe=False):
    with open(WATCH_PATH, "a") as f, contextlib.redirect_stdout(f), contextlib.redirect_stderr(f):
        # Return a tuple (as DEAP expects)
        return run_algo_wrapped(evaluator, population, showMe=False)

def console_wrapper(msg):
    with open(WATCH_PATH, "a") as f, contextlib.redirect_stdout(f), contextlib.redirect_stderr(f):
        console.print(msg)

def run_algo_wrapped(evaluator, population, showMe=False):
    fitnesses = []
    best_fitness_so_far = float("inf")
    args = [(evaluator, ind, showMe) for ind in population]
    pool = Pool(processes=(cpu_count() - 2))
    if showMe:
        return evaluate_solution(args[0])

    with Progress(
        SpinnerColumn(spinner_name="dots12"),
        TextColumn("🔍 [progress.description]{task.description}"),
        BarColumn(bar_width=None),
        "•",
        TaskProgressColumn(text_format="[progress.percentage]{task.percentage:>5.1f}%",show_speed=True),
        "•",
        TimeElapsedColumn(),
        "•",
        TimeRemainingColumn(),
        "•",
        console=console,
        transient=True
    ) as progress:
        
        task = progress.add_task(f"Evaluating | Best Fitness: {best_fitness_so_far:.6e}", total=len(population))

        for fitness in pool.imap_unordered(evaluate_solution, args):
            fitnesses.append(fitness)
            best_fitness_so_far = min(best_fitness_so_far, fitness[0])  # assuming single-objective
            progress.update(task, advance=1, description=f"Evaluating | Best Fitness: {best_fitness_so_far:.6e}")

    # fitnesses = toolbox.map(toolbox.evaluate, population)
    for ind, fit in zip(population, fitnesses):
        ind.fitness.values = fit

    return population, best_fitness_so_far



def calculate_island_diversity(island1, island2):
    """Calculate diversity between two islands based on fitness distribution"""
    if not island1 or not island2:
        return 1.0
    
    fitness1 = [ind.fitness.values[0] for ind in island1]
    fitness2 = [ind.fitness.values[0] for ind in island2]
    
    mean1, mean2 = np.mean(fitness1), np.mean(fitness2)
    std1, std2 = np.std(fitness1), np.std(fitness2)
    
    # Normalized difference in means and standard deviations
    mean_diff = abs(mean1 - mean2) / (abs(mean1) + abs(mean2) + 1e-10)
    std_diff = abs(std1 - std2) / (std1 + std2 + 1e-10)
    
    return (mean_diff + std_diff) / 2

def probabilistic_migration(migrant, target_island, acceptance_base=0.3, fitness_weight=0.7):
    """Determine if a migrant should be accepted into target island"""
    if not target_island:
        return True
    
    target_fitnesses = [ind.fitness.values[0] for ind in target_island]
    target_avg_fitness = np.mean(target_fitnesses)
    target_best_fitness = min(target_fitnesses)
    migrant_fitness = migrant.fitness.values[0]
    
    # Base acceptance probability for diversity
    acceptance_prob = acceptance_base
    
    # Fitness-based adjustment
    if migrant_fitness < target_avg_fitness:  # Better than average
        fitness_bonus = min(0.6, (target_avg_fitness - migrant_fitness) / abs(target_avg_fitness + 1e-10))
        acceptance_prob += fitness_weight * fitness_bonus
    
    # Always give some chance for diversity, even if fitness is worse
    acceptance_prob = max(0.1, min(0.9, acceptance_prob))
    
    return random.random() < acceptance_prob

def perform_migration(islands, island_stats, gen, toolbox, migration_size=2):
    """Perform ring topology migration with probabilistic acceptance"""
    num_islands = len(islands)
    log_message(f"🌊 Starting migration at generation {gen}", emoji="🚢")
    
    migration_summary = []
    
    for i in range(num_islands):
        source_island = islands[i]
        target_island_id = (i + 1) % num_islands
        target_island = islands[target_island_id]
        
        # Get best individuals from source island
        source_best = sorted(source_island, key=lambda x: x.fitness.values[0])[:migration_size]
        
        migrations_sent = 0
        migrations_accepted = 0
        
        for migrant in source_best:
            island_stats[i]['migrations_sent'] += 1
            island_stats[target_island_id]['migrations_received'] += 1
            migrations_sent += 1
            
            if probabilistic_migration(migrant, target_island):
                # Replace worst individual in target island
                worst_idx = max(range(len(target_island)), 
                              key=lambda idx: target_island[idx].fitness.values[0])
                old_fitness = target_island[worst_idx].fitness.values[0]
                target_island[worst_idx] = toolbox.clone(migrant)
                
                island_stats[target_island_id]['migrations_accepted'] += 1
                migrations_accepted += 1
                
                log_message(f"  ✅ Island {i+1}→{target_island_id+1}: "
                          f"Migrant {migrant.fitness.values[0]:.6e} replaced {old_fitness:.6e}", 
                          emoji="🚀")
            else:
                log_message(f"  ❌ Island {i+1}→{target_island_id+1}: "
                          f"Migrant {migrant.fitness.values[0]:.6e} rejected", 
                          emoji="🚫")
        
        migration_summary.append({
            'source': i + 1,
            'target': target_island_id + 1,
            'sent': migrations_sent,
            'accepted': migrations_accepted
        })
    
    # Log migration summary
    for summary in migration_summary:
        acceptance_rate = (summary['accepted'] / summary['sent']) * 100 if summary['sent'] > 0 else 0
        log_message(f"  🏝️ Island {summary['source']} → Island {summary['target']}: "
                  f"{summary['accepted']}/{summary['sent']} accepted ({acceptance_rate:.1f}%)", 
                  emoji="📊")
    
    total_sent = sum(s['sent'] for s in migration_summary)
    total_accepted = sum(s['accepted'] for s in migration_summary)
    overall_rate = (total_accepted / total_sent) * 100 if total_sent > 0 else 0
    
    log_message(f"🏝️ Migration Summary: {total_accepted}/{total_sent} "
              f"successful ({overall_rate:.1f}%)", emoji="📊", panel=True)



def eaMuPlusLambda(population, toolbox, mu, lambda_, cxpb, mutpb, ngen, evaluator,
                   stats=None, halloffame=None, verbose=__debug__,
                   checkpoint_path="checkpoint.pkl", checkpoint_interval=1,
                   use_islands=True, num_islands=10, migration_interval=15, migration_size=2):
    
    start_time = time.time()

    # Try loading from checkpoint
    if os.path.exists(checkpoint_path):
        log_message("Checkpoint found. Loading...", emoji="📦")
        with open(checkpoint_path, "rb") as f:
            checkpoint_data = pickle.load(f)
            population = checkpoint_data["population"]
            logbook = checkpoint_data["logbook"]
            start_gen = checkpoint_data["generation"] + 1
        log_message(f"Resuming from generation {start_gen}", emoji="✅")

        if len(population) < mu:
            log_message(f"Expanding population to: {mu}", emoji="🌱")
            new_inds = [toolbox.individual() for _ in range(mu - len(population))]
            invalid_ind = [ind for ind in new_inds if not ind.fitness.valid]
            population.extend(invalid_ind)
            log_message(f"Expanded population to: {mu}", emoji="🌱")
        elif len(population) > mu:
            population = population[:mu]
            log_message(f"Shrinked population to: {mu}", emoji="🍂")

        log_message(f"Cleaning up fitness", emoji="🧹")
        for ind in population:
            del ind.fitness.values

        log_message(f"Re-Evaluating Fitnesses", emoji="🔍")
        population, generational_best = run_algo(evaluator, population)
        log_message(f"Finished Re-Evaluating Fitnesses", emoji="✅")

        # Manually apply elitism without using tools.selBest
        best_ind = min(population, key=lambda ind: ind.fitness.values[0])

        log_message(f"🔒 Best Fitness from Checkpoint: {best_ind.fitness.values[0]}", emoji="🏅")
        evaluate_solution((evaluator, best_ind, True))


        record = stats.compile(population) if stats is not None else {}
        # logbook.record(gen=gen, nevals=len(invalid_ind), **record)
        if verbose:
                    # Extract statistics
            best_fitness_so_far = record["min"][0]
            worst_fitness = record["max"][0]
            mean_fitness = record["avg"][0]
            std_fitness = record["std"][0]

            log_message(
                f"""{CYAN}🌟 Initial Status{RESET}
                🌍 Best fitness: {best_fitness_so_far:.6e}
                📊 Mean fitness: {mean_fitness:.6e}
                👎 Worst fitness: {worst_fitness:.6e}
                📉 Fitness std dev: {std_fitness:.6e}""",
                    panel=True
            )


        # fitnesses = toolbox.map(toolbox.evaluate, population)
        # for ind, fit in zip(population, fitnesses):
        #     ind.fitness.values = fit

    else:
        log_message("No checkpoint found. Starting fresh.", emoji="🚀")
        logbook = tools.Logbook()
        # logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

        invalid_ind = [ind for ind in population if not ind.fitness.valid]
        population, generational_best = run_algo(evaluator, population)
        # fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        # for ind, fit in zip(invalid_ind, fitnesses):
        #     ind.fitness.values = fit

        record = stats.compile(population) if stats is not None else {}
        logbook.record(gen=0, nevals=len(invalid_ind), **record)

        if verbose:
            print(logbook.stream)
            with open(checkpoint_path, "wb") as f:
                pickle.dump({
                    "population": population,
                    "logbook": logbook,
                    "generation": 0
                }, f)
                log_message(f"Saved checkpoint at generation 0", emoji="💾")

        start_gen = 1
        best_fitness_so_far = float("inf")

    # 🏝️ Initialize Islands if enabled (AFTER population is ready)
    islands = []
    island_stats = []
    if use_islands:
        island_size = mu // num_islands
        log_message(f"🏝️ Initializing {num_islands} islands with {island_size} individuals each", emoji="🌊")
        
        for i in range(num_islands):
            start_idx = i * island_size
            end_idx = start_idx + island_size if i < num_islands - 1 else mu
            island = population[start_idx:end_idx]
            islands.append(island)
            island_stats.append({
                'best_fitness': float('inf'),
                'migrations_sent': 0,
                'migrations_received': 0,
                'migrations_accepted': 0
            })
            log_message(f"  Island {i+1}: {len(island)} individuals, best fitness: {min(ind.fitness.values[0] for ind in island):.6e}", emoji="🏝️")
        
        log_message(f"🏝️ Island initialization complete - ready for evolution!", emoji="✅", panel=True)

    record = stats.compile(population) if stats is not None else {}
    total_time = 0

    # Static bounds
    MIN_MUTPB = 0.1
    MAX_MUTPB = 0.9
    DIVERSITY_WINDOW_SIZE = 20
    diversity_window = deque(maxlen=DIVERSITY_WINDOW_SIZE)
    # Smooth mutation adjustment
    delta = 0.015  # base change per update
    fitnesses = []
    gen_runtimes = []
    stagn
    




    log_message(f"Starting Generational Loop", emoji="🧬")

    for gen in range(start_gen, ngen + 1):
        gen_start_time = time.time()

        # Start a new generation with a Rule to separate sections
        console_wrapper(Rule(f"Generation {gen}", style="bold blue"))

        current_div = record["std"][0]
        mean_fitness = record["avg"][0]
        # Add current diversity to the rolling window
        diversity_window.append(current_div)

        # Only compute threshold if enough data
        if len(diversity_window) >= 5:
            threshold = np.percentile(diversity_window, 20)  # or 10 for stricter cutoff
        else:
            threshold = current_div  # fallback for early generations


        # Difference ratio to scale delta gradually (with division by zero protection)
        if abs(mean_fitness - best_fitness_so_far) > 1e-10:
            diff_ratio = abs(best_fitness_so_far / (mean_fitness - best_fitness_so_far))
        else:
            diff_ratio = 1.0  # fallback when fitnesses are very close
        scaled_delta = delta * (1 + min(diff_ratio, 5))  # limit runaway jumps

        if abs(mean_fitness - best_fitness_so_far) > 1e-10 and abs(best_fitness_so_far / (mean_fitness - best_fitness_so_far)) < 0.1:
            mutpb = min(MAX_MUTPB, mutpb + scaled_delta)
            mut_status = f"{RED}⬆️ Increased by {scaled_delta:.4f}{RESET}"
        elif gen - start_gen >= 5:
            mutpb = MAX_MUTPB
            mut_status = f"{RED}⬆️ Maxed out to {MAX_MUTPB:.4f}{RESET}"
        else:
            mutpb = max(MIN_MUTPB, mutpb - scaled_delta)
            mut_status = f"{GREEN}⬇️ Decreased by {scaled_delta:.4f}{RESET}"

        # if abs(current_div) < abs(threshold):
        #     mutpb = min(MAX_MUTPB, mutpb + scaled_delta)
        #     mut_status = f"{RED}⬆️ Increased by {scaled_delta:.4f}{RESET}"
        # elif abs(current_div) == abs(threshold) and gen - start_gen >= 5:
        #     mutpb = MAX_MUTPB
        #     mut_status = f"{RED}⬆️ Maxed out to {MAX_MUTPB:.4f}{RESET}"
        # else:
        #     mutpb = max(MIN_MUTPB, mutpb - scaled_delta)
        #     mut_status = f"{GREEN}⬇️ Decreased by {scaled_delta:.4f}{RESET}"

        # mutpb = 0.2
        cxpb = 1 - mutpb


        
        # 🏝️ Island Evolution vs Single Population Evolution
        if use_islands:
            # Evolution for each island independently
            all_offspring = []
            island_best_fitnesses = []
            
            for island_id, island in enumerate(islands):
                island_lambda = lambda_ // num_islands
                island_offspring = varOr(island, toolbox, island_lambda, cxpb, mutpb)
                
                # Evaluate island offspring
                invalid_ind = [ind for ind in island_offspring if not ind.fitness.valid]
                island_offspring, island_generational_best = run_algo(evaluator, invalid_ind)
                
                # Update island stats
                island_current_best = min(ind.fitness.values[0] for ind in island)
                if island_generational_best < island_stats[island_id]['best_fitness']:
                    island_stats[island_id]['best_fitness'] = island_generational_best
                    log_message(f"🏝️ Island {island_id+1} new best: {island_generational_best:.6e}", emoji="🌟")
                
                island_best_fitnesses.append(island_generational_best)
                all_offspring.extend(island_offspring)
                
                # Apply selection within island
                combined = island + island_offspring
                islands[island_id] = toolbox.select(combined, len(island))
            
            # Global best from all islands
            generational_best = min(island_best_fitnesses)
            offspring = all_offspring  # For compatibility with existing stagnation logic
            
        else:
            # Original single population evolution
            offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)
            invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
            offspring, generational_best = run_algo(evaluator, invalid_ind)
        
        if generational_best < best_fitness_so_far:
            log_message(f" New best fitness: {generational_best}", emoji="🌠")
            log_message(f" Fitness Diff: {generational_best - best_fitness_so_far:.4e}", emoji="🌙")

        
        # fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)

        # 🧬 Emergency diversity recovery: inject random individuals if diversity too low for too long
        if len(diversity_window) == DIVERSITY_WINDOW_SIZE:
            low_div_count = sum(1 for d in diversity_window if d < threshold * 0.5)
            if low_div_count > DIVERSITY_WINDOW_SIZE * 0.8:
                num_to_replace = max(1, int(mu * 0.1))  # replace ~10%
                log_message(f"{YELLOW}⚠️ Diversity stagnation detected! Injecting {num_to_replace} new individuals{RESET}")
                # Replace the worst individuals in offspring (based on fitness)
                offspring.sort(key=lambda ind: ind.fitness.values[0], reverse=True)
                for i in range(num_to_replace):
                    new_ind = toolbox.individual()
                    new_ind.fitness.values = toolbox.evaluate(new_ind)
                    offspring[i] = new_ind

        # 🎯 Stagnation-based random injection: add new individuals every 20 generations of stagnation
        if stagnation > 0 and stagnation % 20 == 0:
            num_to_inject = max(1, int(mu * 0.1))  # inject 10% new individuals
            log_message(f"{RED}🚨 Fitness stagnation detected ({stagnation} gens)! Injecting {num_to_inject} random individuals{RESET}")
            
            # Generate new random individuals and evaluate them
            new_individuals = []
            for i in range(num_to_inject):
                new_ind = toolbox.individual()
                new_ind.fitness.values = toolbox.evaluate(new_ind)
                new_individuals.append(new_ind)
                log_message(f"  Injected individual {i+1} with fitness: {new_ind.fitness.values[0]:.6e}", emoji="🌱")
            
            # Add new individuals to offspring pool (they'll compete in selection)
            offspring.extend(new_individuals)
            log_message(f"Added {num_to_inject} new individuals to offspring pool for selection", emoji="🔄")

        # 🏝️ Migration Logic
        if use_islands and gen % migration_interval == 0 and gen > 0:
            perform_migration(islands, island_stats, gen, toolbox, migration_size)
        
        # Population handling differs for islands vs single population
        if use_islands:
            # Combine all islands back into population for stats calculation
            population = [ind for island in islands for ind in island]
            best_ind = min(population, key=lambda ind: ind.fitness.values[0])
        else:
            # Original single population logic
            best_ind = min(population + offspring, key=lambda ind: ind.fitness.values[0])
            
            # Select new population (mu - 1 individuals)
            selected = toolbox.select(population + offspring, mu - 1)
            
            # Ensure the best individual survives to next generation
            population[:] = selected + [best_ind]

        log_message(f"Elite preserved with fitness: {best_ind.fitness.values[0]}", emoji="🏅")

        old_best = record["min"][0]
        record = stats.compile(population) if stats is not None else {}

        if record["min"][0] < old_best:
            stagnation = 0
        else:
            stagnation += 1

        # Verbose logging with island statistics
        if verbose:
            # Extract statistics
            best_fitness_so_far = record["min"][0]
            mean_fitness = record["avg"][0]
            std_fitness = record["std"][0]
            worst_fitness = record["max"][0]
            # Time tracking
            gen_time = time.time() - gen_start_time
            gen_runtimes.append(gen_time)
            avg_gen_time = sum(gen_runtimes) / len(gen_runtimes)

            # Build island-specific stats if using islands
            island_info = ""
            if use_islands:
                island_info = f"\n                🏝️ Islands: {num_islands} | Migration every {migration_interval} gens"
                for i, island_stat in enumerate(island_stats):
                    island_best = min(ind.fitness.values[0] for ind in islands[i])
                    island_info += f"\n                  🏝️ Island {i+1}: Best {island_best:.6e} | Sent: {island_stat['migrations_sent']} | Received: {island_stat['migrations_received']} | Accepted: {island_stat['migrations_accepted']}"

            log_message(
                f"""{CYAN}🌟 Gen {gen}{RESET}
                🧜‍♂️ Diversity: {current_div:.4e}
                🧮 Threshold: {threshold:.4e}
                🧬 Mutation: {mutpb:.2f} ({mut_status})
                ⏱️ Stagnation: {stagnation}
                🌍 Global Best fitness: {best_fitness_so_far:.6e}
                🎖️ Generational Best fitness: {generational_best:.6e}
                📊 Mean fitness: {mean_fitness:.6e}
                👎 Worst fitness: {worst_fitness:.6e}
                📉 Fitness std dev: {std_fitness:.6e}
                ⏱️ Generation time: {gen_time:.2f} sec / {(gen_time/60):.2f} min
                📆 Avg gen time: {avg_gen_time:.2f} sec / {(avg_gen_time/60):.2f} min{island_info}""",
                    panel=True,timestamp=False
            )

        if gen % checkpoint_interval == 0:
            # Save checkpoint
            with open(checkpoint_path, "wb") as f:
                pickle.dump({
                    "population": population,
                    "logbook": logbook,
                    "generation": gen
                }, f)
            log_message(f"Saved checkpoint at generation {gen}", emoji="💾")

    total_time = time.time() - start_time
    log_message(
        f"Total time for optimization: {total_time:.2f} seconds ({total_time/60:.2f} minutes, {total_time/3600:.2f} hours)",
        emoji="🕒"
    )

    return population, logbook

def eaMuCommaLambda(population, toolbox, mu, lambda_, cxpb, mutpb, ngen,
                    stats=None, halloffame=None, verbose=__debug__):
    r"""This is the :math:`(\mu~,~\lambda)` evolutionary algorithm.

    :param population: A list of individuals.
    :param toolbox: A :class:`~deap.base.Toolbox` that contains the evolution
                    operators.
    :param mu: The number of individuals to select for the next generation.
    :param lambda\_: The number of children to produce at each generation.
    :param cxpb: The probability that an offspring is produced by crossover.
    :param mutpb: The probability that an offspring is produced by mutation.
    :param ngen: The number of generation.
    :param stats: A :class:`~deap.tools.Statistics` object that is updated
                  inplace, optional.
    :param halloffame: A :class:`~deap.tools.HallOfFame` object that will
                       contain the best individuals, optional.
    :param verbose: Whether or not to log the statistics.
    :returns: The final population
    :returns: A class:`~deap.tools.Logbook` with the statistics of the
              evolution

    The algorithm takes in a population and evolves it in place using the
    :func:`varOr` function. It returns the optimized population and a
    :class:`~deap.tools.Logbook` with the statistics of the evolution. The
    logbook will contain the generation number, the number of evaluations for
    each generation and the statistics if a :class:`~deap.tools.Statistics` is
    given as argument. The *cxpb* and *mutpb* arguments are passed to the
    :func:`varOr` function. The pseudocode goes as follow ::

        evaluate(population)
        for g in range(ngen):
            offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)
            evaluate(offspring)
            population = select(offspring, mu)

    First, the individuals having an invalid fitness are evaluated. Second,
    the evolutionary loop begins by producing *lambda_* offspring from the
    population, the offspring are generated by the :func:`varOr` function. The
    offspring are then evaluated and the next generation population is
    selected from **only** the offspring. Finally, when
    *ngen* generations are done, the algorithm returns a tuple with the final
    population and a :class:`~deap.tools.Logbook` of the evolution.

    .. note::

        Care must be taken when the lambda:mu ratio is 1 to 1 as a
        non-stochastic selection will result in no selection at all as the
        operator selects *lambda* individuals from a pool of *mu*.


    This function expects :meth:`toolbox.mate`, :meth:`toolbox.mutate`,
    :meth:`toolbox.select` and :meth:`toolbox.evaluate` aliases to be
    registered in the toolbox. This algorithm uses the :func:`varOr`
    variation.
    """
    assert lambda_ >= mu, "lambda must be greater or equal to mu."

    # Evaluate the individuals with an invalid fitness
    invalid_ind = [ind for ind in population if not ind.fitness.valid]
    fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
    for ind, fit in zip(invalid_ind, fitnesses):
        ind.fitness.values = fit

    if halloffame is not None:
        halloffame.update(population)

    logbook = tools.Logbook()
    logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

    record = stats.compile(population) if stats is not None else {}
    logbook.record(gen=0, nevals=len(invalid_ind), **record)
    if verbose:
        print(logbook.stream)

    # Begin the generational process
    for gen in range(1, ngen + 1):
        # Vary the population
        offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        # Update the hall of fame with the generated individuals
        if halloffame is not None:
            halloffame.update(offspring)

        # Select the next generation population
        population[:] = toolbox.select(offspring, mu)

        # Update the statistics with the new population
        record = stats.compile(population) if stats is not None else {}
        logbook.record(gen=gen, nevals=len(invalid_ind), **record)
        if verbose:
            print(logbook.stream)
    return population, logbook


def eaGenerateUpdate(toolbox, ngen, halloffame=None, stats=None,
                     verbose=__debug__):
    """This is algorithm implements the ask-tell model proposed in
    [Colette2010]_, where ask is called `generate` and tell is called `update`.

    :param toolbox: A :class:`~deap.base.Toolbox` that contains the evolution
                    operators.
    :param ngen: The number of generation.
    :param stats: A :class:`~deap.tools.Statistics` object that is updated
                  inplace, optional.
    :param halloffame: A :class:`~deap.tools.HallOfFame` object that will
                       contain the best individuals, optional.
    :param verbose: Whether or not to log the statistics.
    :returns: The final population
    :returns: A class:`~deap.tools.Logbook` with the statistics of the
              evolution

    The algorithm generates the individuals using the :func:`toolbox.generate`
    function and updates the generation method with the :func:`toolbox.update`
    function. It returns the optimized population and a
    :class:`~deap.tools.Logbook` with the statistics of the evolution. The
    logbook will contain the generation number, the number of evaluations for
    each generation and the statistics if a :class:`~deap.tools.Statistics` is
    given as argument. The pseudocode goes as follow ::

        for g in range(ngen):
            population = toolbox.generate()
            evaluate(population)
            toolbox.update(population)


    This function expects :meth:`toolbox.generate` and :meth:`toolbox.evaluate` aliases to be
    registered in the toolbox.

    .. [Colette2010] Collette, Y., N. Hansen, G. Pujol, D. Salazar Aponte and
       R. Le Riche (2010). On Object-Oriented Programming of Optimizers -
       Examples in Scilab. In P. Breitkopf and R. F. Coelho, eds.:
       Multidisciplinary Design Optimization in Computational Mechanics,
       Wiley, pp. 527-565;

    """
    logbook = tools.Logbook()
    logbook.header = ['gen', 'nevals'] + (stats.fields if stats else [])

    for gen in range(ngen):
        # Generate a new population
        population = toolbox.generate()
        # Evaluate the individuals
        fitnesses = toolbox.map(toolbox.evaluate, population)
        for ind, fit in zip(population, fitnesses):
            ind.fitness.values = fit

        if halloffame is not None:
            halloffame.update(population)

        # Update the strategy with the evaluated individuals
        toolbox.update(population)

        record = stats.compile(population) if stats is not None else {}
        logbook.record(gen=gen, nevals=len(population), **record)
        if verbose:
            print(logbook.stream)

    return population, logbook
